import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";

import { User } from "app/types";
import { RootState, AppThunk } from "app/store";

import { getUser } from "./api";
import { CONTAINER_KEY, FAILED, IDLE, LOADING } from "./constants";

export interface UserWithActionsState {
  user?: User;
  score: number;
  status: "idle" | "loading" | "failed";
}

const initialState: UserWithActionsState = {
  user: undefined,
  status: IDLE,
  score: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getUserAsync(id))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserAsync = createAsyncThunk(
  `${CONTAINER_KEY}/getUser`,
  async (id: number, { getState, dispatch }) => {
    const response = await getUser(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userWithActionsSlice = createSlice({
  name: CONTAINER_KEY,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementScore: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.score += 1;
    },
    decrementScore: (state) => {
      state.score -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    changeByAmount: (state, action: PayloadAction<number>) => {
      state.score += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAsync.pending, (state, action) => {
        state.status = LOADING;
        state.score = 0;
        state.user = undefined;
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.status = IDLE;
        state.user = action.payload;
      })
      .addCase(getUserAsync.rejected, (state, action) => {
        state.status = FAILED;
      });
  },
});

export const { incrementScore, decrementScore, changeByAmount } =
  userWithActionsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.userWithActions.score)`
export const selectScore = (state: RootState) => state.userWithActions.score;
export const selectStatus = (state: RootState) => state.userWithActions.status;

// Memoized selector
export const selectUser = createSelector(
  (state: RootState) => state.userWithActions,
  (userWithActions) => userWithActions.user
);

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const decrementIfPositive =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectScore(getState());
    if (currentValue > 0) {
      dispatch(changeByAmount(-amount));
    }
  };

export default userWithActionsSlice.reducer;
