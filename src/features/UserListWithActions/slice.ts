import {
  createAsyncThunk,
  createEntityAdapter,
  createSelector,
  createSlice,
} from "@reduxjs/toolkit";

import { User } from "app/types";
import { RootState } from "app/store";

import { deleteUser, getUsers } from "./api";
import { CONTAINER_KEY, FAILED, IDLE, LOADING } from "./constants";

const userAdapter = createEntityAdapter<User>();
const initialState = userAdapter.getInitialState({
  status: IDLE,
});

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getUserAsync(id))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUsersAsync = createAsyncThunk(
  `${CONTAINER_KEY}/getUsers`,
  async () => {
    const response = await getUsers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteUserAsync = createAsyncThunk(
  `${CONTAINER_KEY}/deleteUser`,
  async (id: number) => {
    return await deleteUser(id);
  }
);

export const usersWithActionsSlice = createSlice({
  name: CONTAINER_KEY,
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUsersAsync.pending, (state) => {
        state.status = LOADING;
      })
      .addCase(getUsersAsync.fulfilled, (state, action) => {
        state.status = IDLE;
        userAdapter.addMany(state, action.payload);
      })
      .addCase(getUsersAsync.rejected, (state) => {
        state.status = FAILED;
      })
      //
      .addCase(deleteUserAsync.pending, (state) => {
        state.status = LOADING;
      })
      .addCase(deleteUserAsync.fulfilled, (state, action) => {
        state.status = IDLE;
        userAdapter.removeOne(state, action.meta.arg);
      })
      .addCase(deleteUserAsync.rejected, (state) => {
        state.status = FAILED;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.userWithActions.status)`
export const selectStatus = (state: RootState) => state.usersWithActions.status;

// Memoized selector
export const selectUsers = createSelector(
  (state: RootState) => state.usersWithActions,
  (usersWithActions) => Object.values(usersWithActions.entities)
);

export default usersWithActionsSlice.reducer;
